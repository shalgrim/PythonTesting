This is Time for action starting on page 41.

I'm updating it for the exercise in pp 48-9.

First the tests that describe the PID constructor.

>>> import time
>>> real_time = time.time
>>> time.time = (float(x) for x in xrange(1, 1000)).next
>>> import pid

>>> controller = pid.PID(P=0.5, I=0.5, D=0.5, setpoint=0,
...						initial=12)

>>> controller.gains
(0.5, 0.5, 0.5)

>>> controller.setpoint
[0.0]

>>> controller.previous_time
1.0

>>> controller.previous_error
-12.0

>>> controller.integrated_error
0.0

>>> time.time = real_time

The constructor should also optionally accept a parameter specifying
when the initial measurement was taken.

>>> pid = reload(pid)
>>> controller = pid.PID(P=0.5, I=0.5, D=0.5, setpoint=1,
...						initial=12, when=43)
>>> controller.gains
(0.5, 0.5, 0.5)
>>> controller.setpoint
[1.0]
>>> controller.previous_time
43.0
>>> controller.previous_error
-11.0
>>> controller.integrated_error
0.0

Now the tests that describe measurement processing.

>>> real_time = time.time
>>> time.time = (float(x) for x in xrange(1, 1000)).next
>>> pid = reload(pid)
>>> controller = pid.PID(P=0.5, I=0.5, D=0.5, setpoint=0,
...						initial=12)
>>> controller.calculate_response(6)
-3.0
>>> controller.calculate_response(3)
-4.5
>>> controller.calculate_response(-1.5)
-0.75
>>> controller.calculate_response(-2.25)
-1.125
>>> time.time = real_time

The calculate_response method should be wiling to accept a
parameter specifying at what time the call is happening.

>>> pid = reload(pid)
>>> controller = pid.PID(P=0.5, I=0.5, D=0.5, setpoint=0,
...						initial=12, when=1)
>>> controller.calculate_response(6, 2)
-3.0
>>> controller.calculate_response(3, 3)
-4.5
>>> controller.calculate_response(-1.5, 4)
-0.75
>>> controller.calculate_response(-2.25, 5)
-1.125


Now the tests that describe setpoint handling

>>> pid = reload(pid)
>>> controller = pid.PID(P=0.5, I=0.5, D=0.5, setpoint=0,
...							initial=12)
>>> controller.push_setpoint(7)
>>> controller.setpoint
[0.0, 7.0]
>>> controller.push_setpoint(8.5)
>>> controller.setpoint
[0.0, 7.0, 8.5]
>>> controller.pop_setpoint()
8.5
>>> controller.setpoint
[0.0, 7.0]
>>> controller.pop_setpoint()
7.0
>>> controller.setpoint
[0.0]

>>> controller.pop_setpoint()
Traceback (most recent call last):
ValueError: PID controller must have a setpoint

8/17/12
Page 53
It's important that the P, I, and D gains not be negative.

>>> pid = reload(pid)
>>> controller = pid.PID(P=-0.5, I=0.5, D=0.5, setpoint=0,
...						initial=12)
Traceback (most recent call last):
ValueError: PID controller gains must be non-negative

>>> pid = reload(pid)
>>> controller = pid.PID(P=0.5, I=-0.5, D=0.5, setpoint=0,
...						initial=12)
Traceback (most recent call last):
ValueError: PID controller gains must be non-negative

>>> pid = reload(pid)
>>> controller = pid.PID(P=0.5, I=0.5, D=-0.5, setpoint=0,
...						initial=12)
Traceback (most recent call last):
ValueError: PID controller gains must be non-negative

We want to be able to use complex numbers as the measurement and setpoint
for the PID controller.

>>> pid = reload(pid)
>>> controller = pid.PID(P=0.5, I=0.5, D=0.5,
...						setpoint = 1 + 1j,
...						initial = 9.4852813742385695+9.4852813742385695j,
...						when = 1)

>>> controller.calculate_response(5.2426406871192848+5.2426406871192848j, 2)
(-2.1213203435596424-2.1213203435596424j)

>>> controller.calculate_response(3.1213203435596424+3.1213203435596424j, 3)
(-3.181980515339464-3.181980515339464j)

>>> controller.calculate_response(-0.060660171779821193-0.060660171779821193j, 4)
(-0.5303300858899109-0.5303300858899109j)

>>> controller.calculate_response(-0.5909902576697319-0.5909902576697319j, 5)
(-0.7954951288348661-0.7954951288348661j)
